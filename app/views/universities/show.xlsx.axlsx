wb = xlsx_package.workbook
wb.add_worksheet(name: "Infrastructures") do |sheet|
    sheet.add_row ["Project Code", "Project Title", "Project Status", "Project Classification", "Last Updated", "Description", "Desired Project Outcome", "End User/s", "Budget (PhP)", "Contract Price (PhP)", "Actual Cost (PhP)", "Source of Funds", "Contractor/Vendor", "No. of Biddings", "Date of Pre-Procurement", "Date of Pre-Bidding", "Date of Post-Qualification", "Date of Notice of Award", "Date of Purchase Order/Contract", "Date of Notice to Proceed", "Target Start Date", "Actual Start Date", "% Accomplishment", "Target Completion Date", "Actual Completion Date", "General Remarks", "Bidding Remarks", "Financial Remarks", "Timeline Remarks"]
    @projects_list.each do |project|
    	@source_of_funds = ""
    	project.funds.each do |source|
    		@source_of_funds = @source_of_funds + source.source_name + " - " + source.budget.to_s + "\n"
    	end
        @project_status = ProjectStatus.find(project.status).description rescue nil
        @project_classification = ProjectClassification.find(project.classification).description rescue nil
        sheet.add_row [project.project_code, project.project_name, @project_status, @project_classification, project.updated_at.try(:strftime, "%d %B %Y"), project.description, project.expected_outcome, project.end_user, project.financial_budget, project.financial_contract_price, project.financial_actual_cost, @source_of_funds, project.bidding_contractor, project.bidding_number, project.bidding_preprocurement.try(:strftime, "%d %B %Y"), project.bidding_prebidding.try(:strftime, "%d %B %Y"), project.bidding_postquali.try(:strftime, "%d %B %Y"), project.bidding_award.try(:strftime, "%d %B %Y"), project.bidding_purchase.try(:strftime, "%d %B %Y"), project.bidding_proceed.try(:strftime, "%d %B %Y"), project.timeline_target_start.try(:strftime, "%d %B %Y"), project.timeline_actual_start.try(:strftime, "%d %B %Y"), project.percent_accomplishment, project.timeline_target_end.try(:strftime, "%d %B %Y"), project.timeline_actual_end.try(:strftime, "%d %B %Y"), project.remarks, project.bidding_remarks, project.financial_remarks, project.timeline_remarks]
        project.project_components.each do |component|
        	@component_source_of_funds = ""
	    	component.funds.each do |source|
	    		@component_source_of_funds = @component_source_of_funds + source.source_name + " - " + source.budget.to_s + "\n"
	    	end
            @component_status = ProjectStatus.find(component.status).description rescue nil
            @component_classification = ProjectClassification.find(component.classification).description rescue nil
        	sheet.add_row [ "Component", component.component_name, @component_status, @component_classification, component.updated_at.try(:strftime, "%d %B %Y"), component.description, component.expected_outcome, component.end_user, component.financial_budget, component.financial_contract_price, component.financial_actual_cost, @component_source_of_funds, component.bidding_contractor, component.bidding_number, component.bidding_preprocurement.try(:strftime, "%d %B %Y"), component.bidding_prebidding.try(:strftime, "%d %B %Y"), component.bidding_postquali.try(:strftime, "%d %B %Y"), component.bidding_award.try(:strftime, "%d %B %Y"), component.bidding_purchase.try(:strftime, "%d %B %Y"), component.bidding_proceed.try(:strftime, "%d %B %Y"), component.timeline_target_start.try(:strftime, "%d %B %Y"), component.timeline_actual_start.try(:strftime, "%d %B %Y"), component.percent_accomplishment, component.timeline_target_end.try(:strftime, "%d %B %Y"), component.timeline_actual_end.try(:strftime, "%d %B %Y"), component.remarks, component.bidding_remarks, component.financial_remarks, component.timeline_remarks ]
        end
        project.project_phases.each do |phase|
        	@phase_source_of_funds = ""
	    	phase.funds.each do |source|
	    		@phase_source_of_funds = @phase_source_of_funds + source.source_name + " - " + source.budget.to_s + "\n"
	    	end
            @phase_status = ProjectStatus.find(phase.status).description rescue nil
            @phase_classification = ProjectClassification.find(phase.classification).description rescue nil
        	sheet.add_row [ "Phase", phase.phase_name, @phase_status, @phase_classification, phase.description, phase.updated_at.try(:strftime, "%d %B %Y"), phase.expected_outcome, phase.end_user, phase.financial_budget, phase.financial_contract_price, phase.financial_actual_cost, @phase_source_of_funds, phase.bidding_contractor, phase.bidding_number, phase.bidding_preprocurement.try(:strftime, "%d %B %Y"), phase.bidding_prebidding.try(:strftime, "%d %B %Y"), phase.bidding_postquali.try(:strftime, "%d %B %Y"), phase.bidding_award.try(:strftime, "%d %B %Y"), phase.bidding_purchase.try(:strftime, "%d %B %Y"), phase.bidding_proceed.try(:strftime, "%d %B %Y"), phase.timeline_target_start.try(:strftime, "%d %B %Y"), phase.timeline_actual_start.try(:strftime, "%d %B %Y"), phase.percent_accomplishment, phase.timeline_target_end.try(:strftime, "%d %B %Y"), phase.timeline_actual_end.try(:strftime, "%d %B %Y"), phase.remarks, phase.bidding_remarks, phase.financial_remarks, phase.timeline_remarks ]
        end
    end
end